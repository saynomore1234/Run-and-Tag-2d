import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH, SCREEN_HEIGHT = 800, 600
GREEN = (34, 177, 76)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
FPS = 60

# Screen setup
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Run and Tag Game")
clock = pygame.time.Clock()

# Fonts
font = pygame.font.Font(None, 36)

def draw_text(text, font, color, surface, x, y):
    textobj = font.render(text, True, color)
    textrect = textobj.get_rect()
    textrect.center = (x, y)
    surface.blit(textobj, textrect)

def draw_button(text, font, color, surface, x, y, width, height):
    button_rect = pygame.Rect(x, y, width, height)
    pygame.draw.rect(surface, color, button_rect)
    pygame.draw.rect(surface, BLACK, button_rect, 2)  # Black border for visibility
    draw_text(text, font, BLACK, surface, x + width // 2, y + height // 2)
    return button_rect

def game_over_screen():
    screen.fill(GREEN)
    restart_button = draw_button('Restart', font, GRAY, screen, SCREEN_WIDTH // 2 - 55, SCREEN_HEIGHT // 2 - 25, 100, 50)
    quit_button = draw_button('Quit', font, GRAY, screen, SCREEN_WIDTH // 2 - 55, SCREEN_HEIGHT // 2 + 35, 100, 50)
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                if restart_button.collidepoint(mouse_pos):
                    main()  # Restart the game completely
                elif quit_button.collidepoint(mouse_pos):
                    pygame.quit()
                    sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    main()  # Restart the game completely
                elif event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()

def main():
    player = Player()
    chaser = Chaser(player)  # Correctly passing player to chaser
    obstacles = pygame.sprite.Group()
    for _ in range(10):
        obstacles.add(Obstacle())
    all_sprites = pygame.sprite.Group(player, chaser, *obstacles)

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        all_sprites.update(obstacles)  # Ensure update method passes 'obstacles' correctly
        if pygame.sprite.collide_rect(player, chaser):
            game_over_screen()

        screen.fill(GREEN)
        all_sprites.draw(screen)
        pygame.display.flip()
        clock.tick(FPS)


class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((30, 30))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))
        self.speed = 5

    def update(self, obstacles):
        keys = pygame.key.get_pressed()
        dx, dy = 0, 0
        if keys[pygame.K_LEFT]:
            dx = -self.speed
        if keys[pygame.K_RIGHT]:
            dx = self.speed
        if keys[pygame.K_UP]:
            dy = -self.speed
        if keys[pygame.K_DOWN]:
            dy = self.speed

        self.rect.x += dx
        self.rect.clamp_ip(screen.get_rect())
        if pygame.sprite.spritecollideany(self, obstacles):
            self.rect.x -= dx

        self.rect.y += dy
        self.rect.clamp_ip(screen.get_rect())
        if pygame.sprite.spritecollideany(self, obstacles):
            self.rect.y -= dy

class Chaser(pygame.sprite.Sprite):
    def __init__(self, player):
        super().__init__()
        self.player = player  # Ensure the player is stored as an instance attribute
        self.image = pygame.Surface((30, 30))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect(center=(random.randint(0, SCREEN_WIDTH), random.randint(0, SCREEN_HEIGHT)))
        self.speed = 3  # Adjusted speed, modify this as needed

    def update(self, obstacles):
        # Ensure 'player' is being used correctly
        move_x = self.speed if self.rect.x < self.player.rect.x else -self.speed
        move_y = self.speed if self.rect.y < self.player.rect.y else -self.speed

        # Attempt to move chaser along the X axis
        original_x = self.rect.x
        self.rect.x += move_x
        if pygame.sprite.spritecollideany(self, obstacles):
            self.rect.x = original_x  # Revert X movement if collision

        # Attempt to move chaser along the Y axis
        original_y = self.rect.y
        self.rect.y += move_y
        if pygame.sprite.spritecollideany(self, obstacles):
            self.rect.y = original_y  # Revert Y movement if collision


class Obstacle(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(GRAY)
        self.rect = self.image.get_rect(center=(random.randint(50, SCREEN_WIDTH-50), random.randint(50, SCREEN_HEIGHT-50)))
        pygame.draw.rect(self.image, BLACK, self.image.get_rect(), 2)

if __name__ == "__main__":
    main()
