import pygame
import sys

# Initialize Pygame
pygame.init()

# Constants for the game
SCREEN_WIDTH, SCREEN_HEIGHT = 800, 600
PLAYER_SIZE = 50
TAGGER_SIZE = 50
OBSTACLE_SIZE = 100
PLAYER_COLOR = (255, 0, 0)  # Red
TAGGER_COLOR = (0, 0, 255)  # Blue
OBSTACLE_COLOR = (0, 255, 0)  # Green
FPS = 60

# Setup the display
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Run and Tag Game")

# Reset game entities to initial states
def reset_game():
    global player, tagger, obstacle
    player = {
        "rect": pygame.Rect(375, 275, PLAYER_SIZE, PLAYER_SIZE),
        "speed": 5
    }
    tagger = {
        "rect": pygame.Rect(100, 100, TAGGER_SIZE, TAGGER_SIZE),
        "speed": 3
    }
    obstacle = {
        "rect": pygame.Rect(300, 200, OBSTACLE_SIZE, OBSTACLE_SIZE)
    }

# Function to handle player movement
def move_player(keys_pressed):
    if keys_pressed[pygame.K_UP]:
        player["rect"].y -= player["speed"]
    if keys_pressed[pygame.K_DOWN]:
        player["rect"].y += player["speed"]
    if keys_pressed[pygame.K_LEFT]:
        player["rect"].x -= player["speed"]
    if keys_pressed[pygame.K_RIGHT]:
        player["rect"].x += player["speed"]
    # Prevent movement through the obstacle
    if player["rect"].colliderect(obstacle["rect"]):
        adjust_position(keys_pressed)

# Function to adjust position after collision
def adjust_position(keys_pressed):
    if keys_pressed[pygame.K_UP]:
        player["rect"].y += player["speed"]
    elif keys_pressed[pygame.K_DOWN]:
        player["rect"].y -= player["speed"]
    elif keys_pressed[pygame.K_LEFT]:
        player["rect"].x += player["speed"]
    elif keys_pressed[pygame.K_RIGHT]:
        player["rect"].x -= player["speed"]

# Function to move the tagger towards the player
def move_tagger():
    if tagger["rect"].x < player["rect"].x:
        tagger["rect"].x += tagger["speed"]
    elif tagger["rect"].x > player["rect"].x:
        tagger["rect"].x -= tagger["speed"]
    if tagger["rect"].y < player["rect"].y:
        tagger["rect"].y += tagger["speed"]
    elif tagger["rect"].y > player["rect"].y:
        tagger["rect"].y -= tagger["speed"]

# Check if the tagger has caught the player
def check_game_over():
    return player["rect"].colliderect(tagger["rect"])

# Function to display game over screen and ask if player wants to retry
def game_over_screen():
    screen.fill((0, 0, 0))
    font = pygame.font.Font(None, 74)
    text = font.render('Game Over', True, (255, 255, 255))
    screen.blit(text, (250, 250))
    # Display retry instructions
    font = pygame.font.Font(None, 36)
    retry_text = font.render('Press Y to retry or N to quit', True, (255, 255, 255))
    screen.blit(retry_text, (220, 350))
    pygame.display.flip()

    # Wait for user input
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_y:
                    return True  # Signal to retry the game
                elif event.key == pygame.K_n:
                    pygame.quit()
                    sys.exit()

# Main game loop
def game_loop():
    reset_game()
    clock = pygame.time.Clock()
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        
        keys_pressed = pygame.key.get_pressed()
        move_player(keys_pressed)
       
